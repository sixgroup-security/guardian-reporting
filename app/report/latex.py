# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Guardian. If not, see <https://www.gnu.org/licenses/>.

import base64
import os
import re
import enum
import logging
import pypandoc
from io import BytesIO
from urllib.parse import urlparse
from enum import Enum, IntEnum
from core.config import Settings
from .util import ReportCreatorBase
from schema import ReportGenerationInfo, SessionLocal
from schema.user import UserReport, User
from schema.util import SeverityType
from schema.reporting.file import FileReport
from schema.reporting.report_template import ReportTemplateFileVersion
from schema.reporting.report_section_management.vulnerability import (
    VulnerabilityReport, Vulnerability, VulnerabilityStatus
)
from PIL import Image, ImageOps, ImageDraw
from typing import Callable, Dict, List

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"

DEFAULT_AVATAR = ""
logger = logging.getLogger(__name__)


class FileName(Enum):
    report = "report.tex"
    package = "guardian.sty"
    title_page = "01_title_page.tex"
    prefix_sections = "02_prefix_sections.tex"
    report_history = "02_1_report_history.tex"
    authors = "02_2_authors.tex"
    executive_summary = "03_executive-summary.tex"
    postfix_sections = "04_postfix_sections.tex"
    report_scope = "04_1_report_scope.tex"


class LatexSeverityColor(IntEnum):
    critical_color = enum.auto()
    high_color = enum.auto()
    medium_color = enum.auto()
    low_color = enum.auto()
    # info_color = (0, 0, 255)


SeverityColorMapping = {
    LatexSeverityColor.critical_color.name: SeverityType.critical.name,
    LatexSeverityColor.high_color.name: SeverityType.high.name,
    LatexSeverityColor.medium_color.name: SeverityType.medium.name,
    LatexSeverityColor.low_color.name: SeverityType.low.name,
    # LatexSeverityColor.info_color.name: SeverityType.info.name
}


class ReportCreator(ReportCreatorBase):
    """
    This class is responsible for creating the Latex source code for a full report.
    """
    def __init__(
            self,
            info: ReportGenerationInfo,
            images_dir: str,
            **kwargs
    ):
        super().__init__(info=info, **kwargs)
        self.images_dir = images_dir
        self.images_full_path = os.path.join(self.work_dir, images_dir)
        self.report_sections = self.project.report.sections
        self.post_placeholder_pattern = re.compile(r"\\\{\\\{\.([\w(\\_)]+)(?::([\w\\\.:\(\)\s=,;]+))?\\\}\\\}")
        self.image_pattern = re.compile(r'!\[(?P<caption>.*?)\]\((?P<path>.+?)\)')
        # We need to convert the severity distribution to the correct format for the barchart.
        # {"critical_color": [("Section 1", 1), ("Section 2", 2)], "high_color": ...}
        self._severity_section_distribution = {item.name: [] for item in LatexSeverityColor}
        self._severities = []
        for color in LatexSeverityColor:
            severity = SeverityColorMapping[color.name]
            self._severities.append(severity.capitalize())
            result = [(section.name, section.severity_distribution_dict[severity]) for section in self.report_sections]
            self._severity_section_distribution[color.name] = result
        self._re_latex_commands = re.compile(r"\\(\w+)[\s\*]*(\[.*?\])?\s*\{.*?\}", re.IGNORECASE)

    @property
    def tex_file(self):
        """
        Returns the tex file's full path.
        """
        return os.path.join(self.work_abspath, self.settings.latex_template_file)

    def _save_avatar(self, user: UserReport | User):
        """
        This method fits the avatar image.
        """
        if not user:
            return
        avatar = user.avatar if user.avatar else base64.b64decode(DEFAULT_AVATAR)
        # Create a BytesIO object from the byte stream
        byte_io = BytesIO(avatar)
        # Open image file
        img = Image.open(byte_io)
        # Resize image to a square
        img = ImageOps.fit(img, (300, 300))
        # Create circular mask
        mask = Image.new('L', (300, 300), 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0, 300, 300), fill=255)
        # Apply mask to image
        img.putalpha(mask)
        # Save circular thumbnail image
        img.save(os.path.join(self.images_full_path, f"{user.id}.png"))

    def convert_markdown_images(self, report_text):
        """
        Converts Markdown image URLs from API format to local file include format.

        :param report_text: str, the report text containing Markdown image URLs.
        :return: str, the final text with Markdown image URLs converted.
        """
        def image_replacement(match):
            caption = match.group("caption")
            url = urlparse(match.group("path"))
            file_path = os.path.join(self.images_dir, f"{os.path.basename(url.path)}.png")
            try:
                if url.query:
                    parameters = [tuple(item.split("=")) for item in url.query.split("&")]
                    width = list(filter(lambda x: x[0] == "w", parameters))
                    try:
                        width = float(width[0][1])
                        width = width if width <= 1 else 1
                        width = width if width > 0 else 0.1
                    except:
                        width = None
                else:
                    width = None
            except Exception as ex:
                self._logger.exception(ex)
                width = None
            return f'![{caption}]({file_path})' if width is None else f'![{caption}]({file_path}){{width={width * 100}%}}'
        return self.image_pattern.sub(image_replacement, report_text)

    def default_placeholder_func(
            self,
            placeholder_name: str,
            params: Dict[str, str],
            matched_string: str,
            final_name: str | None
    ):
        """
        Default placeholder function that replaces placeholders with the final value.
        :param placeholder_name: str, the placeholder name.
        :param params: dict, dictionary containing placeholder parameters.
        :param matched_string: str, the matched placeholder string.
        :param final_name: str, the final value for the placeholder.
        :return:
        """
        result = self.replace_placeholders_only_func(
            placeholder_name=placeholder_name,
            params=params,
            matched_string=matched_string,
            final_name=final_name
        )
        if placeholder_name == "barchart":
            result = self.get_bar_chart(params)
        elif placeholder_name == "vulnerability_overview":
            result = self.get_vulnerability_overview()
        elif placeholder_name == "vulnerability_details":
            result = self.get_vulnerability_details()
        elif placeholder_name == "reportscope":
            logger.debug("Process placeholder: reportscope")
            # Create the report scope Latex file
            label = params.get("label")
            caption = params.get("caption")
            column_widths = params.get("columnwidths", "")
            if self._get_report_scope(
                widths_cm=column_widths.split(","),
                label=label,
                caption=caption,
            ):
                result = f"""
\\input{{{FileName.report_scope.value}}}"""
        return result

    def pre_report_placeholder_func(
            self,
            placeholder_name: str,
            params: Dict[str, str],
            matched_string: str,
            final_name: str | None
    ):
        """
        Placeholder function to process the pre-report text that replaces placeholders with the final value.
        :param placeholder_name: str, the placeholder name.
        :param params: dict, dictionary containing placeholder parameters.
        :param matched_string: str, the matched placeholder string.
        :param final_name: str, the final value for the placeholder.
        :return:
        """
        result = ""
        if placeholder_name == "is_final_report":
            self._logger.debug("Process placeholder: is_final_report")
            result = params.get("true", "NOT FOUND") if self.latest_version_info.is_final \
                else params.get("false", "NOT FOUND")
        elif placeholder_name == "report_history":
            logger.debug("Process placeholder: report_history")
            result = f"""
\\input{{{FileName.report_history.value}}}"""
        elif placeholder_name == "team_members":
            logger.debug("Process placeholder: team_members")
            result = f"""
\\input{{{FileName.authors.value}}}"""
        elif placeholder_name == "table_of_contents":
            logger.debug("Process placeholder: table_of_contents")
            result = """{
\\setcounter{tocdepth}{\\mytocdepth}
\\tableofcontents
}"""
        return result

    def _get_figure(self, content: str, caption: str | None, label: str | None) -> str:
        """
        Encapsulates the given content into a figure environment.
        """
        label_command = f"\\label{{{label}}}{os.linesep}" if label else ""
        caption_command = f"\\caption{{{caption}}}{os.linesep}" if caption else ""
        return f"""
\\begin{{figure}}[h!]
\\centering
{content}
{caption_command}
{label_command}
\\end{{figure}}
"""

    def get_bar_chart(self, parameters: Dict[str, str]) -> str:
        """
        This method returns the barchart.
        """
        sections = [self.test_latex_injection(section.name) for section in self.project.report.sections]
        label = parameters.get('label')
        caption = parameters.get('caption')
        width = parameters.get('width', '0.9\\textwidth')
        height = parameters.get('height', '4cm')
        bar_width = parameters.get('barwidth', '10pt')
        # The lesser components we have, the higher the enlargelimits number can become (the higher the number, the
        # closer the individual components are together). Three components .2, two components: .7.
        large_limits = parameters.get('enlargelimits', '0.4')
        font_size = parameters.get('fontsize', '\\tiny')
        legend_item_distance = parameters.get('legenditemdistance', '2.5em')
        category_box_width = parameters.get('categoryboxwidth', '2.5cm')
        result = f"""
\\begin{{tikzpicture}}
    \\begin{{axis}}[
        ybar,
        ymin=0,
        y axis line style={{opacity=0}},
        ymajorgrids=true,
        width={width},
        height={height},
        bar width={bar_width},
        enlargelimits={large_limits},
        nodes near coords style={{font={font_size},/pgf/number format/assume math mode}},
        every node near coord/.append style={{font={font_size}}},
        label style={{font={font_size}}},
        tick label style={{font={font_size},/pgf/number format/assume math mode}},
        x axis line style={{-}},
        y axis line style={{-}},
        axis y line*=left,
        axis x line*=bottom,
        tick style={{draw=none}},
        nodes near coords,
        nodes near coords align={{vertical}},
        symbolic x coords={{{",".join(sections)}}},
        xtick = data,
        enlarge y limits={{value=0.2,upper}},
        x tick label style={{text width={category_box_width},align=center}},
        legend image code/.code={{\\draw [#1, ultra thin] (0cm,-0.08cm) rectangle (0.2cm,0.12cm); }},
        legend style={{at={{(0.5, -0.3)}},font={font_size},anchor=north,legend columns=-1,draw=none,/tikz/every even column/.append style={{column sep={legend_item_distance}}}}}
    ]
"""
        for severity in self._severity_section_distribution:
            # (Application 1, 0) (Infrastructure, 0)
            values = " ".join([
                f"({section}, {value})" for section, value in self._severity_section_distribution[severity]
            ])
            result += f"\\addplot[fill={severity.replace('_', '')},draw=none] coordinates {{{values}}};{os.linesep}"
        result += f"""\\legend{{{", ".join(self._severities)}}}
    \\end{{axis}}
\\end{{tikzpicture}}
"""
        return self._get_figure(result, caption, label) if caption or label else result

    def get_vulnerability(
            self,
            vulnerability: VulnerabilityReport
    ) -> List[str]:
        """
        Creates the tex file for the given vulnerability.
        """
        result = []
        if vulnerability.status == VulnerabilityStatus.resolved:
            title_prefix = "[Resolved] "
        elif vulnerability.status == VulnerabilityStatus.review:
            title_prefix = "[Review] "
        else:
            title_prefix = ""
        # Save files
        for file in vulnerability.files:
            file.save_to_file(self.images_full_path)
        # Create vulnerability report
        vulnerability_name = self.get_tex(
            f"{title_prefix}{vulnerability.name}",
            pre_placeholder_fn=self.replace_placeholders_only_func
        )

        cwe_weakness = self.test_latex_injection(vulnerability.cwe_weakness_str or "")
        cwe_weakness_id = self.test_latex_injection(vulnerability.cwe_weakness_id or "")
        cwe_weakness_link = (
            self.get_tex(f"[{cwe_weakness}]({self.settings.cvss_definitions_url}/{cwe_weakness_id})")
            if cwe_weakness_id else "-"
        )
        # Add the vulnerabilities header
        result.append("\\{severity}header{{{name}}}{{{cwe}}}{{{label}}}{{ID-{vulnid:03d}}}".format(
            severity=vulnerability.severity.name,
            name=vulnerability_name,
            cwe=cwe_weakness_link,
            label=vulnerability.reference_str,
            vulnid=vulnerability.vulnerability_id)
        )
        result.append("\\subsubsection*{{General Description}}")
        result.append(self.get_tex(
            vulnerability.description,
            pre_placeholder_fn=self.replace_placeholders_only_func,
            has_images=True
        ))
        result.append("")
        result.append("\\subsubsection*{{Observation / Proof-of-Concept}}")
        result.append(self.get_tex(
            vulnerability.observation,
            pre_placeholder_fn=self.replace_placeholders_only_func,
            has_images=True
        ))
        result.append("")
        result.append("\\subsubsection*{{Recommendations}}")
        result.append(self.get_tex(
            vulnerability.measure_recommendation,
            pre_placeholder_fn=self.replace_placeholders_only_func,
            has_images=True
        ))
        result.append("")
        if vulnerability.references:
            result.append("\\subsubsection*{{References}}")
            result.append(self.get_tex(
                vulnerability.references or "",
                pre_placeholder_fn=self.replace_placeholders_only_func
            ))
        result.append("")
        result.append("\\subsubsection*{{Vulnerability Scoring System Information (CVSS v{version})}}".format(
            version=self.settings.cvss_version
        ))
        if vulnerability.rating_comment:
            result.append(self.get_tex(
                vulnerability.rating_comment or "",
                pre_placeholder_fn=self.replace_placeholders_only_func
            ))
            result.append("")
            result.append("")
        if vulnerability.cvss_score and vulnerability.cvss_score > 0 and vulnerability.cvss_vector:
            cvss_vector = self.test_latex_injection(vulnerability.cvss_vector)
            cvss_link = self.get_tex(f"[{cvss_vector}]({self.settings.cvss_base_url}#{cvss_vector})")
            result.append(
                "\\cvssheader{{{score}}}{{{severity}}}{{{cvss_calculator_url}}}".format(
                    score=vulnerability.cvss_score,
                    severity=vulnerability.severity_str,
                    cvss_calculator_url=cvss_link)
            )
        else:
            result.append("\\cvssheader{{{score}}}{{{severity}}}{{{cvss_calculator_url}}}".format(
                score="-",
                severity=vulnerability.severity_str,
                cvss_calculator_url="-")
            )
        result.append("\\newpage")
        return result

    def get_vulnerability_overview(self) -> str:
        """
        Implements logic for placeholder {{.vulnerability_overview}}.
        """
        result = []
        for section in self.report_sections:
            if len(self.report_sections) > 1:
                result.append("\\subsubsection*{{{section}}}".format(
                    section=self.get_tex(section.name))
                )
            if len(section.vulnerabilities) == 0:
                result.append("No issues were identified.")
            for vulnerability in section.vulnerabilities:
                if not vulnerability.visible:
                    continue
                result.append(f"""\\nameref{{header:{vulnerability.reference_str}}}""")
                result.append("")
        if result:
            result.append("\\newpage")
        return os.linesep.join(result)

    def get_vulnerability_details(self):
        """
        Implements logic for placeholder {{.vulnerability_details}}
        """
        result = []
        for section in self.report_sections:
            previous_severity = None
            result.append("\\subsection{{{section}}}".format(section=self.get_tex(section.name)))
            result.append("")
            if section.description:
                result.append(self.get_tex(section.description, pre_placeholder_fn=self.replace_placeholders_only_func))
                result.append("")
            if len(section.vulnerabilities) == 0:
                result.append("No issues were identified.")
            for vulnerability in section.vulnerabilities:
                # Create subsection if necessary
                if previous_severity != vulnerability.severity:
                    previous_severity = vulnerability.severity
                    result.append("\\subsubsection*{{Severity: {severity}}}".format(
                        severity=self.get_tex(vulnerability.severity_str))
                    )
                # Create vulnerability description file
                result += self.get_vulnerability(vulnerability)
        return os.linesep.join(result)

    def write_file(self, file: FileName | None, content: str, mode: str = "w") -> str:
        """
        This method writes the content to the given file.
        """
        file_name = os.path.join(self.work_dir, str(file.value))
        if not file:
            return content
        with open(file_name, mode) as f:
            f.write(content)
        return content

    def save_images(self, images: List[FileReport]):
        """
        Saves the images to the images directory.
        """
        for image in images:
            image.save_to_file(os.path.join(self.work_dir, self.images_full_path))

    def test_latex_injection(self, markdown: str) -> str:
        """
        This method checks for unauthorized LaTeX commands in the given Markdown text.
        """
        def latex_injection(match):
            result = match.group(0)
            latex_command = match.group(1)
            if latex_command.lower() not in self.settings.latex_command_whitelist:
                version = f" and version '{self.latest_version_info.version}'" if self.latest_version_info else ""
                self._logger.warning(
                    f"Usage of unauthorized LaTeX command '{result}' in report '{self.report.id}'{version}"
                )
                result = ""
            return result
        return self._re_latex_commands.sub(latex_injection, markdown)

    def get_tex(
            self,
            markdown: str | None,
            pre_placeholder_fn: Callable[[str, Dict[str, str], str, str | None], str | None] | None = None,
            post_placeholder_fn: Callable[[str, Dict[str, str], str, str | None], str | None] | None = None,
            has_images: bool = False
    ) -> str:
        """
        This method converts the given Markdown text to Latex.

        :param markdown: str, the Markdown text to convert.
        :param pre_placeholder_fn: function, a function that processes placeholders before the conversion.
        :param post_placeholder_fn: function, a function that processes placeholders after the conversion.
        :param has_images: bool, whether the Markdown text contains images.
        """
        result = self.test_latex_injection(markdown)
        # We need to normalize figures from URLs to local file paths.
        result = self.convert_markdown_images(result) if has_images else markdown
        # We need to replace placeholders with the final values.
        result = self.replace_placeholders(
            report_text=result,
            placeholder_values=self.placeholders,
            placeholder_pattern=self.pre_placeholder_pattern,
            placeholder_fn=pre_placeholder_fn
        ) if pre_placeholder_fn else result
        # We need to convert the Markdown to Latex.
        result = pypandoc.convert_text(
            source=result,
            to="tex",
            format="markdown",
            extra_args=self.settings.pandoc_arguments,
            encoding="utf-8",
            verify_format=True,
            sandbox=True,
            # cworkdir=self.work_dir
        ).strip()
        # We perform post-processing on the placeholders.
        result = self.replace_placeholders(
            report_text=result,
            placeholder_values=self.placeholders,
            placeholder_pattern=self.post_placeholder_pattern,
            placeholder_fn=post_placeholder_fn
        ) if post_placeholder_fn else result
        # We perform final post-processing (e.g., replace \href by \slink or 1 by 1^{st}).
        return self.post_processing_func(result)

    def _get_report(self) -> str:
        """
        This method creates the report.
        """
        command = lambda file: f"\\input{{{file.value}}}{os.linesep}"
        result = command(FileName.title_page)
        result += """\\addtocontents{toc}{\\protect\\setcounter{tocdepth}{-1}}
\\setcounter{secnumdepth}{0}
"""
        result += command(FileName.prefix_sections)
        result += """
\\setcounter{secnumdepth}{4}

\\addtocontents{toc}{\\protect\\setcounter{tocdepth}{1}}
\\begin{multicols}{2}
"""
        result += command(FileName.executive_summary)
        result += """\\end{multicols}
\\addtocontents{toc}{\\protect\\setcounter{tocdepth}{\\mytocdepth}}

\\newpage
"""
        result += command(FileName.postfix_sections)
        return self.write_file(FileName.report, result)

    def _get_package(self) -> str:
        """
        This method creates/returns the variables file.
        """
        command = lambda command, value: f"\\newcommand{{\\{command}}}{{{value}}}{os.linesep}"
        result = ""
        for key, value in self.placeholders.items():
            if isinstance(value, str):
                result += command(key.replace("_", ""), value)
        return self.write_file(FileName.package, result, mode="a")

    def _get_report_history(self) -> str:
        """
        This method returns the report history.
        """
        result = """
\\begin{table}[h!]
    \\begin{tabular*}{\\textwidth}{l l l l l@{\\extracolsep{\\fill}}}\\hline
    \\textbf{Version} & \\textbf{State} & \\textbf{Name} & \\textbf{Date} & \\textbf{Description} \\\\\\hline
""".strip()
        for version in self.report.versions:
            created_at = f"{version.report_date:%d.%m.%Y}"
            version_status = version.status.name.upper()
            user_name = self.test_latex_injection(version.username)
            comment = self.test_latex_injection(version.comment)
            result += f"""
{version.version} & {version_status} & {user_name} & {created_at} & {comment} \\\\\\hline"""
        result += """
    \\end{tabular*}
\\end{table}
""".strip()
        return self.write_file(FileName.report_history, result)

    def _get_report_scope(
            self,
            widths_cm: List[str],
            caption: str | None = None,
            label: str = None
    ) -> str | None:
        """
        This method returns the report scope.
        """
        if len(widths_cm or []) != 6 or not any([str(item).isnumeric() for item in widths_cm]):
            logger.debug(f"Skip creating report scope table due to invalid widths_cm parameter: {widths_cm}")
            return None
        if label_str := self.test_latex_injection(label or ""):
            label_str = f"\\label{{{label_str}}}"
        if caption_str := self.test_latex_injection(caption or ""):
            caption_str = f"\\caption{{{caption_str}{label_str}}}"
        column_widths = " ".join([f"p{{{item}cm}}" for item in widths_cm])

        # Create rows
        ref = 1
        rows = []
        for scope in self.report.scopes:
            asset = scope.asset or ""
            asset = self.get_tex(f"`{asset}`")
            zone = self.test_latex_injection(scope.zone or "")
            view = scope.view.name.capitalize() if scope.view else "-"
            description = self.get_tex(scope.description or "")
            if scope.strong_authentication is None:
                mfa = "-"
            elif scope.strong_authentication:
                mfa = "Yes"
            else:
                mfa = "No"
            rows.append(f"{ref} & {view} & {asset} & {zone} & {mfa} & {description}\\\\\\hline")
            ref += 1

        result = f"""
        \\begin{{longtable}}[h!]{{{column_widths}}}
        {caption_str}\\hline
        \\textbf{{Ref.}} & \\textbf{{View}} & \\textbf{{Target}} & \\textbf{{Zone}} & \\textbf{{Strong Auth.}} & \\textbf{{Description}} \\\\\\hline
        {''.join(rows)}
        \\end{{longtable}}
        """
        return self.write_file(FileName.report_scope, result)

    def _get_author_row(self, user: UserReport | User, roles: List[str]) -> str:
        """
        This method returns a row for the authors table.
        """
        image_path = os.path.join(self.images_dir, f"{user.id}.png")
        role_items = " \\item ".join([self.test_latex_injection(item) for item in roles]).strip()
        full_name = self.test_latex_injection(user.full_name)
        user_email = self.test_latex_injection(user.email)
        return f"""
\\includegraphics[width=30mm]{{{image_path}}} & {full_name} & &
\\begin{{minipage}}[t]{{0.4\\textwidth}}
  \\begin{{itemize}}
      \\item \\setlength{{\\itemindent}}{{-0.3pt}}\\setlength{{\\itemsep}}{{-1ex}}{role_items}
  \\end{{itemize}}
\\end{{minipage}} &
\\begin{{minipage}}[t]{{0.4\\textwidth}}
  \\begin{{itemize}}\\setlength{{\\itemindent}}{{-0.3pt}}\\setlength{{\\itemsep}}{{-1ex}}
      \\item \\slink{{mailto:{user_email}}}{{{user_email}}}
  \\end{{itemize}}
\\end{{minipage}} \\\\
"""

    def _get_authors(self) -> str:
        """
        This method returns the authors.
        """

        self._save_avatar(self.project.lead_tester)
        result = """
\\begin{table}[h!]
    \\begin{tabularx}{\\textwidth}{m{3cm} m{1.8cm} m{.5cm} m{4cm} m{4cm}}\\hline
        \\multicolumn{2}{c}{\\textbf{Person}} & & \\textbf{Responsibility} & \\textbf{Contact Details} \\\\\\hline
& & & & \\\\[-1ex]
"""
        if self.project.lead_tester:
            result += self._get_author_row(self.project.lead_tester, ["Lead Penetration Tester"])
        for tester in self.project.testers:
            self._save_avatar(tester)
            result += self._get_author_row(tester, ["Penetration Tester"])
        result += """
& & & & \\\\[-1ex]\\hline
    \\end{tabularx}
\\end{table}
"""
        return self.write_file(FileName.authors, result)

    def _get_title_page(self) -> str:
        """
        This method returns the title page.
        """
        result = """
\\begin{titlepage}

\\vspace*{\\fill}
{\\huge{\\reportstatus Report}}\\\\[0.1em]
{\\huge\\textbf{\\color{criticalcolor}{{.project_name}}}}
\\vskip 2.5em

{\\large\\textbf{Project}}\\\\
\\makebox[4cm][l]{Project}         \\makebox{{{.project_name}}}\\\\
\\makebox[4cm][l]{CCPT-ID}         \\makebox{{{.project_id}}}\\\\
\\makebox[4cm][l]{Customer}        \\makebox{{{.customer_name}}}\\\\
\\makebox[4cm][l]{Timeline}        \\makebox{{{.test_period}}}\\\\
\\makebox[4cm][l]{Assessor/s}      \\makebox{{{.assessors}}}\\\\
\\vskip 1.5em

{\\large\\textbf{Document}}\\\\
\\makebox[4cm][l]{Name}            \\makebox{{{.pdf_file_name}}}\\\\
\\makebox[4cm][l]{Version}         \\makebox{{{.report_version}}}\\\\
\\makebox[4cm][l]{Classification}  \\makebox{{{.classification}}}\\\\
\\makebox[4cm][l]{Pages}           \\makebox{\\pageref{LastPage}}\\\\
\\makebox[4cm][l]{Date}            \\makebox{{{.delivery_date}}}\\\\
\\makebox[4cm][l]{Provider}        \\makebox{{{.provider_name}}}\\\\
\\makebox[4cm][l]{Author/s}        \\makebox{{{.assessors}}}\\\\


\\vspace*{\\fill}

\\end{titlepage}

\\pagenumbering{arabic}
"""
        result = self.get_tex(result, pre_placeholder_fn=self.replace_placeholders_only_with_latex_escape_func)
        return self.write_file(FileName.title_page, result)

    def _get_executive_summary(self) -> str:
        """
        This method returns the executive summary.
        """
        result = self.get_tex(
            self.report.executive_summary,
            pre_placeholder_fn=self.default_placeholder_func,
            has_images=True
        )
        return self.write_file(FileName.executive_summary, result)

    def _get_report_prefix(self) -> str:
        """
        This method returns the report prefix.
        """
        result = self.get_tex(
            self.report.prefix_section_text,
            pre_placeholder_fn=self.default_placeholder_func,
            post_placeholder_fn=self.pre_report_placeholder_func,
            has_images=True
        )
        return self.write_file(FileName.prefix_sections, result)

    def _get_report_postfix(self) -> str:
        """
        This method returns the report postfix.
        """
        result = self.get_tex(
            self.report.postfix_section_text,
            pre_placeholder_fn=self.default_placeholder_func,
            has_images=True
        )
        return self.write_file(FileName.postfix_sections, result)

    def create(self):
        """
        Creates the Latex sources based on the given data.
        """
        self._preparation()
        self._create()

    def _preparation(self):
        """
        Checks the prerequisites for creating the Latex files.
        """
        # Check placeholders for invalid LaTeX commands
        for key, value in self.placeholders.items():
            self._placeholders[key] = self.test_latex_injection(value)
        # Save images
        self.save_images(self.project.report.files)
        self.save_images(self.project.report.report_template.files)

    def _create(self):
        """
        Creates the Latex sources based on the given data.
        """
        # Create the report package
        self._get_package()
        # Create the report Latex file that is imported by the main Latex file.
        self._get_report()
        # Create the title page.
        self._get_title_page()
        # Create the report history Latex file.
        self._get_report_history()
        # Create the authors Latex file.
        self._get_authors()
        # Create the report prefix Latex file.
        self._get_report_prefix()
        # Create the executive summary Latex file.
        self._get_executive_summary()
        # Create the report postfix Latex file.
        self._get_report_postfix()

    def get_zip(self) -> bytes:
        """
        Returns the created file structure as a ZIP file.
        :return:
        """
        return self.create_zip(self.work_dir)

    @staticmethod
    def check(settings: Settings):
        """
        Checks prerequisites for creating Latex files.
        """
        # Check if Excel template file exist
        for version in ReportTemplateFileVersion:
            latex_template_directory = settings.get_latex_template_directory(version)
            latex_template_file = settings.get_latex_template_file(version)
            if not os.path.isdir(latex_template_directory):
                raise FileNotFoundError(f"Latex template directory '{latex_template_directory}' not found.")
            if not os.path.isfile(latex_template_file):
                raise FileNotFoundError(f"Latex template file '{latex_template_file}' not found.")


class VulnerabilityCreator(ReportCreator):
    """
    This class is responsible for creating the Latex source code for a vulnerability.
    """

    def __init__(
            self,
            vulnerability: Vulnerability,
            **kwargs
    ):
        super().__init__(**kwargs)
        self.vulnerability = VulnerabilityReport.from_orm(vulnerability)

    def _get_report(self) -> str:
        """
        This method creates the report.
        """
        result = self.get_vulnerability(self.vulnerability)
        result = os.linesep.join(result)
        return self.write_file(FileName.report, result)

    def _create(self):
        """
        Creates the Latex sources based on the given data.
        """

        # Create the report package
        self._get_package()
        # Create the report Latex file that is imported by the main Latex file.
        self._get_report()
